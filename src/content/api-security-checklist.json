{
  "slug": "api-security-checklist",
  "title": "API Security Checklist",
  "description": "Checklist of the most important security countermeasures when designing, testing, and releasing your API.",
  "tags": ["api", "security", "checklist"],
  "content": "# API Security Checklist\n\nChecklist of the most important security countermeasures when designing, testing, and releasing your API.\n\n## Authentication\n\n- [ ] Don't use `Basic Auth`. Use standard authentication instead (e.g. [JWT](https://jwt.io/), [OAuth](https://oauth.net/)).\n- [ ] Don't reinvent the wheel in `Authentication`, `token generation`, `password storage`. Use the standards.\n- [ ] Use `Max Retry` and jail features in Login.\n- [ ] Use encryption on all sensitive data.\n\n### JWT (JSON Web Token)\n\n- [ ] Use a random complicated key (`JWT Secret`) to make brute forcing the token very hard.\n- [ ] Don't extract the algorithm from the header. Force the algorithm in the backend (`HS256` or `RS256`).\n- [ ] Make token expiration (`TTL`, `RTTL`) as short as possible.\n- [ ] Don't store sensitive data in the JWT payload, it can be decoded [easily](https://jwt.io/#debugger-io).\n\n### OAuth\n\n- [ ] Always validate `redirect_uri` server-side to allow only whitelisted URLs.\n- [ ] Always try to exchange for code and not tokens (don't allow `response_type=token`).\n- [ ] Use `state` parameter with a random hash to prevent CSRF on the OAuth authentication process.\n- [ ] Define the default scope, and validate scope parameters for each application.\n\n## Access\n\n- [ ] Limit requests (Throttling) to avoid DDoS / brute-force attacks.\n- [ ] Use HTTPS on server side to avoid MITM (Man in the Middle Attack).\n- [ ] Use `HSTS` header with SSL to avoid SSL Strip attack.\n- [ ] For private APIs, only allow access from whitelisted IPs/hosts.\n\n## Input\n\n- [ ] Use the proper HTTP method according to the operation: `GET (read)`, `POST (create)`, `PUT/PATCH (replace/update)`, and `DELETE (to delete a record)`, and respond with `405 Method Not Allowed` if the requested method isn't appropriate for the requested resource.\n- [ ] Validate `content-type` on request Accept header (Content Negotiation) to allow only your supported format (e.g. `application/xml`, `application/json`, etc.) and respond with `406 Not Acceptable` response if not matched.\n- [ ] Validate `content-type` of posted data as you accept (e.g. `application/x-www-form-urlencoded`, `multipart/form-data`, `application/json`, etc.).\n- [ ] Validate user input to avoid common vulnerabilities (e.g. `XSS`, `SQL-Injection`, `Remote Code Execution`, etc.).\n- [ ] Don't use any sensitive data (`credentials`, `Passwords`, `security tokens`, or `API keys`) in the URL, but use standard Authorization header.\n- [ ] Use an API Gateway service to enable caching, Rate Limit policies (e.g. `Quota`, `Spike Arrest`, or `Concurrent Rate Limit`) and deploy APIs resources dynamically.\n\n## Processing\n\n- [ ] Check if all the endpoints are protected behind authentication to avoid broken authentication process.\n- [ ] User own resource ID should be avoided. Use `/me/orders` instead of `/user/654321/orders`.\n- [ ] Don't auto-increment IDs. Use `UUID` instead.\n- [ ] If you are parsing XML files, make sure entity parsing is not enabled to avoid `XXE` (XML external entity attack).\n- [ ] If you are parsing XML files, make sure entity expansion is not enabled to avoid `Billion Laughs/XML bomb` via exponential entity expansion attack.\n- [ ] Use a CDN for file uploads.\n- [ ] If you are dealing with huge amount of data, use Workers and Queues to process as much as possible in background and return response fast to avoid HTTP Blocking.\n- [ ] Do not forget to turn the DEBUG mode OFF.\n\n## Output\n\n- [ ] Send `X-Content-Type-Options: nosniff` header.\n- [ ] Send `X-Frame-Options: deny` header.\n- [ ] Send `Content-Security-Policy: default-src 'none'` header.\n- [ ] Remove fingerprinting headers - `X-Powered-By`, `Server`, `X-AspNet-Version`, etc.\n- [ ] Force `content-type` for your response. If you return `application/json`, then your `content-type` response is `application/json`.\n- [ ] Don't return sensitive data like `credentials`, `Passwords`, or `security tokens`.\n- [ ] Return the proper status code according to the operation completed. (e.g. `200 OK`, `400 Bad Request`, `401 Unauthorized`, `405 Method Not Allowed`, etc.).\n\n## CI & CD\n\n- [ ] Audit your design and implementation with unit/integration tests coverage.\n- [ ] Use a code review process and disregard self-approval.\n- [ ] Ensure that all components of your services are statically scanned by AV software before pushing to production, including vendor libraries and other dependencies.\n- [ ] Design a rollback solution for deployments.\n\n### Resources\n\n- [api-development-tools](https://github.com/shieldfy/API-Security-Checklist)\n\n"
}
