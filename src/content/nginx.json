{
  "slug": "nginx",
  "title": "Nginx",
  "description": "Usefull nginx commands",
  "tags": ["nginx"],
  "content": "# Nginx\n\nUsefull nginx commands\n\n- [Alphabetical index of directives](http://nginx.org/en/docs/dirindex.html)\n- [Alphabetical index of variables](http://nginx.org/en/docs/varindex.html)\n- [Documentation](http://nginx.org/en/docs/)\n\n```sh\nserver {\n\tlocation {\n\t}\n}\n```\n\n## Blocks: server\n\nPriority\n\n1. listen\n2. server_name\n\n### Directives: listen\n\nThe _listen_ directive can be set to:\n\n- An IP address/port combo.\n- A lone IP address which will then listen on the default port 80.\n- A lone port which will listen to every interface on that port.\n- The path to a Unix socket.\n\nWhen \"incomplete\" listen directives\n\n- A block with no listen directive uses the value 0.0.0.0:80.\n- A block set to an IP address 111.111.111.111 with no port becomes 111.111.111.111:80\n- A block set to port 8888 with no IP address becomes 0.0.0.0:8888\n\n#### Options: default_server\n\n```sh\nserver {\n    listen      80 default_server;\n    server_name example.net www.example.net;\n    ...\n}\n```\n\n### Directives: server_name\n\nNginx evaluates these by using the following formula:\n\n- Nginx will first try to find a server block with a server_name that matches the value in the \"Host\" header of the request exactly.\n- Find a server block with a server_name that matches using a leading wildcard (indicated by a \\* at the beginning of the name in the config).\n- If no match is found using a leading wildcard, Nginx then looks for a server block with a server_name that matches using a trailing wildcard (indicated by a server name ending with a \\* in the config).\n- If no match is found using a trailing wildcard, Nginx then evaluates server blocks that define the server_name using regular expressions (indicated by a ~ before the name).\n- If no regular expression match is found, Nginx then selects the default server block for that IP address and port.\n\n```sh\nserver {\n    listen 80;\n    server_name example.com;\n    ...\n}\nserver {\n    listen 80;\n    server_name ~^(www|host1).*\\.example\\.com$;\n    ...\n}\nserver {\n    listen 80;\n    server_name ~^(subdomain|set|www|host1).*\\.example\\.com$;\n    ...\n}\nserver {\n    listen 80;\n    server_name  ~^(?<user>.+)\\.example\\.net$;\n    ...\n}\n```\n\n## Blocks: location\n\n```sh\nlocation optional_modifier location_match {\n\t...\n}\n```\n\n### Options: optional_modifier\n\n- (none): The location is interpreted as a prefix match. This means that the location given will be matched against the beginning of the request URI to determine a match.\n- =: This block will be considered a match if the request URI exactly matches the location given.\n- ~: This location will be interpreted as a **case-sensitive** regular expression match.\n- ~\\*: The location block will be interpreted as a **case-insensitive** regular expression match.\n- ^~: If this block is selected as the best non-regular expression match, regular expression matching will not take place.\n\n### Directives: index\n\n```sh\nindex index.$geo.html index.0.html /index.html;\nautoindex on | off;\n```\n\n### Directives: try_files\n\n```sh\nroot /var/www/main;\ntry_files $uri $uri.html $uri/ /fallback/index.html;\n```\n\nIf a request is made for /blahblah, the first location will initially get the request. It will try to find a file called blahblah in /var/www/main directory. If it cannot find one, it will follow up by searching for a file called blahblah.html.\n\n### Directives: rewrite\n\n```sh\nrewrite ^/rewriteme/(.*)$ /$1 last;\n```\n\nA request for /rewriteme/hello will be handled initially by the first location block. It will be rewritten to /hello and a location will be searched.\n\n### Directives: error_page\n\n```sh\nerror_page 404             /404.html;\nerror_page 500 502 503 504 /50x.html;\n```\n\n---\n\n## Examples\n\n### A simple PHP site configuration\n\n```sh\nserver {\n    listen      80;\n    server_name example.org www.example.org;\n    root        /data/www;\n\n    location / {\n        index   index.html index.php;\n    }\n\n    location ~* \\.(gif|jpg|png)$ {\n        expires 30d;\n    }\n\n    location ~ \\.php$ {\n        fastcgi_pass  localhost:9000;\n        fastcgi_param SCRIPT_FILENAME\n                      $document_root$fastcgi_script_name;\n        include       fastcgi_params;\n    }\n}\n```\n\n### App server (Redmine)\n\n```sh\nserver {\n    listen 80;\n    server_name 107.170.165.117 myproject.com www.myproject.com;\n\n    root /srv/redmine/public;\n    passenger_enabled on;\n\n    client_max_body_size 10m;\n}\n```\n\n### App server (Jenkins)\n\n```sh\nupstream app_server {\n    server 127.0.0.1:8080 fail_timeout=0;\n}\n\nserver {\n    listen 80;\n    listen [::]:80 default ipv6only=on;\n    server_name ci.yourcompany.com;\n\n    location / {\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header Host $http_host;\n        proxy_redirect off;\n\n        if (!-f $request_filename) {\n            proxy_pass http://app_server;\n            break;\n        }\n    }\n}\n```\n\n### Resources\n\n- [Nginx Cheat Sheet](https://gist.github.com/carlessanagustin/9509d0d31414804da03b)\n\n"
}
